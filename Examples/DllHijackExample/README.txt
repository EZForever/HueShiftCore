This example shows how to use the delay-load hook module (delayhook.cpp) to automatically generate DLL hijack stubs, removing the need of an Injector.

In summary, the build & run process goes like this:
- The provided export information (exports.def) gets pre-processed into a import library of target DLL, and used as build input
- exports.def also gets used as the export information of Core DLL, thus creating references to all exported functions from target DLL
- References are resolved by the import library created in the first step, thus creating a "pass-through" EAT
- Since /DELAYLOAD is active, delay-load stubs are generated by the compiler for all exported functions
- Delay-load hook provided by delayhook.cpp replaces references to target DLL in delay-load stub at run-time

You can use the steps described in CoreExample to create a new project from this example, just more files to copy and modify.
NOTE: A lot of stuffs need to be configured properly for this example to build and function. See config.h, exports.def and Directory.Build.props for details.

